window.addEventListener("DOMContentLoaded", function () {
    // Get all radio buttons
    const radioButtons = document.querySelectorAll('input[type="radio"]');

    // Add event listener to each radio button
    radioButtons.forEach(function (button) {
        button.addEventListener("click", updateScore);
    });

    // Call updateScore on DOMContentLoaded to ensure initial score is displayed
    updateScore();
});

function updateScore() {
    // Check if one button from each property is selected
    const selectedOptions = {
        AV: getSelectedValue("AV"),
        AC: getSelectedValue("AC"),
        PR: getSelectedValue("PR"),
        UI: getSelectedValue("UI"),
        scope: getSelectedValue("scope"),
        conf: getSelectedValue("conf"),
        integ: getSelectedValue("integ"),
        avail: getSelectedValue("avail"),
        health: getSelectedValue("health"),
        sens: getSelectedValue("sens")
    };

    // If any property is not selected, show warning and return
    if (Object.values(selectedOptions).includes(undefined)) {
        document.getElementById("warning").style.display = "block";
        document.getElementById("score").textContent = "--";
        return;
    }

    // Hide warning if all properties are selected
    document.getElementById("warning").style.display = "none";

    // Compute the vulnerability score
    const score = computeScore(selectedOptions);

    // Update and display the score
    document.getElementById("score").textContent = score.toFixed(1);
}

function getSelectedValue(name) {
    const selectedButton = document.querySelector('input[name="' + name + '"]:checked');
    return selectedButton ? selectedButton.value : undefined;
}

function computeScore(options) {
    const sensitivity = options.sens === "None" ? 0 : options.sens === "Low" ? 1 : 2;
    const confidentiality = options.conf === "None" ? 0 : options.conf === "Low" ? 1 : 2;
    const integrity = options.integ === "None" ? 0 : options.integ === "Low" ? 1 : 2;
    const health = options.health === "None" ? 0 : options.health === "Low" ? 1 : 2;
    const attackVector = options.AV === "Network" ? 0.85 : options.AV === "Adjacent Network" ? 0.62 : options.AV === "Local" ? 0.55 : 0.20;
    const attackComplexity = options.AC === "Low" ? 0.77 : 0.44;
    const privilegeRequired = options.PR === "None" ? 0.85 : options.PR === "Low" ? 0.62 : 0.27;
    const userInteraction = options.UI === "None" ? 0.85 : 0.62;

    const scopeFactor = options.scope === "Changed" ? 1.08 : 1.0;

    const sensitivityConfidentialityScore = getScore(sensitivity, confidentiality);
    const sensitivityIntegrityScore = getScore(sensitivity, integrity);
    const sensitivityAvailabilityScore = getScore(sensitivity, options.avail === "None" ? 0 : options.avail === "Low" ? 1 : 2);
    const healthIntegrityScore = getScore(health, integrity);
    const healthAvailabilityScore = getScore(health, options.avail === "None" ? 0 : options.avail === "Low" ? 1 : 2);

    const exploitability = 8.22 * attackVector * attackComplexity * privilegeRequired * userInteraction;
    const impact = 1 - (1 - sensitivityConfidentialityScore) * (1 - sensitivityIntegrityScore) * (1 - sensitivityAvailabilityScore) * (1 - healthIntegrityScore) * (1 - healthAvailabilityScore);

    return Math.min(10, (scopeFactor * exploitability * impact).toFixed(1));
}

function getScore(sensitivity, impact) {
    return sensitivity * impact;
}
